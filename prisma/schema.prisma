// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
    // binaryTargets = ["native", "darwin-arm64"] // added for M1 support
}

datasource db {
    provider = "postgresql" // "postgresql" | "mysql" | "sqlite"
    url      = env("DATABASE_URL")
}

model State {
    id              Int            @id @default(autoincrement())
    name            String
    municipalities  Municipality[]
}

model Municipality {
    id      Int    @id @default(autoincrement())
    name    String
    stateId Int
    state   State  @relation(fields: [stateId], references: [id])
    users   User[]
    questions Question[]
}

model User {
    id             Int            @id @default(autoincrement())
    userId         String
    municipalityId Int
    municipality   Municipality   @relation(fields: [municipalityId], references: [id])
    workSelections WorkSelection[]
    permitResults  PermitResult[]
}

model Question {
    id             Int    @id @default(autoincrement())
    questionText   String
    options        Option[]
    municipalityId Int
    municipality   Municipality @relation(fields: [municipalityId], references: [id])
}

model Option {
    id         Int      @id @default(autoincrement())
    optionText String
    response   String
    questionId Int
    question   Question @relation(fields: [questionId], references: [id])
}

model WorkSelection {
    id           Int      @id @default(autoincrement())
    userId       Int
    workType     String
    options      String[]
    user         User     @relation(fields: [userId], references: [id])
}

// TODO: Finish DB models and add results table
model PermitResult {
    id             Int          @id @default(autoincrement())
    user           User         @relation(fields: [userId], references: [id])
    userId         Int
    municipalityId Int
    createdAt      DateTime     @default(now())
    version        String       // consider using a DateTime or Int for versioning
    answers        Json         // stores key-value pairs of questions and answers
    result         String       // the result text
}

